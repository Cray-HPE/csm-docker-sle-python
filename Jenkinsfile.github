/*
 *
 *  MIT License
 *
 *  (C) Copyright 2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library@main') _

// Find a .tar.gz here: https://www.python.org/ftp/python/
def pythonVersion = '3.6.15'

// Tokenize to enable major.minor image tags (e.g. make a 3.10 tag when building 3.10.4).
def (pyMajor, pyMinor, pyBugfix) = pythonVersion.tokenize('.')

// Define the distro that the major.minor and major.minor.patch Docker tags publish to.
def mainSleVersion = '15.4'

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

// Only main or maint/* branches are stable.
def promotionToken = ~"(main|maint\\/.*)"
def isStable = env.BRANCH_NAME ==~ promotionToken ? true : false
pipeline {
    agent none

    // Run every week on Sunday at 4 PM, long after the base image has rebuilt from that morning.
    triggers { cron('H 16 * * 0') }

    environment {
        DOCKER_ARGS = getDockerBuildArgs(name: getRepoName(), description: 'A build environment for Python.')
        DOCKER_BUILDKIT = 1
        MULTI_ARCH = 1
        NAME = getRepoName()
        PY_FULL_VERSION = "${pythonVersion}"
        PY_VERSION = "${pyMajor}.${pyMinor}"
        PY_MAJOR = "${pyMajor}"
        PY_MINOR = "${pyMinor}"
        TIMESTAMP = sh(returnStdout: true, script: "date '+%Y%m%d%H%M%S'").trim()
        VERSION = "${GIT_COMMIT[0..6]}"
    }

    stages {

        stage('Build & Publish') {

            matrix {
                
                agent {
                    label "metal-gcp-builder-large"
                }

                options {
                    buildDiscarder(logRotator(numToKeepStr: "1"))
                    timeout(time: 30, unit: 'MINUTES')
                    disableConcurrentBuilds()
                    timestamps()
    }  
                axes {
                    axis {
                        name 'SLE_VERSION'
                        values '15.3', '15.4'
                    }
                }

                stages {

                    stage('Build') {
                        environment {
                            BUILD_ARGS = "--build-arg 'SLE_VERSION=${SLE_VERSION}' --build-arg 'PY_VERSION=${PY_VERSION}' --build-arg 'PY_FULL_VERSION=${PY_FULL_VERSION}'"
                        }
                        steps {
                            withCredentials([
                                    string(credentialsId: 'sles15-registration-code', variable: 'SLES_REGISTRATION_CODE')
                            ]) {
                                sh "make image"
                            }
                        }
                    }

                    stage('Publish') {
                        environment {
                            SLES_REGISTRATION_CODE = credentials('sles15-registration-code')
                            BUILD_ARGS = "--cache-from type=local,src=docker-build-cache --build-arg 'SLE_VERSION=${SLE_VERSION}' --build-arg 'PY_VERSION=${PY_VERSION}' --build-arg 'PY_FULL_VERSION=${PY_FULL_VERSION}' --secret id=SLES_REGISTRATION_CODE"
                        }
                        steps {
                            script {

                                // Only overwrite an image if this is a stable build.
                                if (isStable) {
                                    /*
                                    Publish these tags on stable:
                                        - Major.Minor.Patch-Distro-Hash-Timestamp    (e.g. 3.10.8-SLES15.4-dhckj3-20221017133121)
                                        - Major.Minor.Patch-Distro-Hash-Timestamp    (e.g. 3.10.8-SLES15.4-dhckj3)
                                        - Major.Minor.Patch-Distro                   (e.g. 3.10.8-SLES15.4)
                                        - Major.Minor-Distro                         (e.g. 3.10-SLES15.4)
                                    */
                                    publishCsmDockerImage(image: env.NAME, tag: "${pythonVersion}-SLES${SLE_VERSION}-${env.VERSION}-${env.TIMESTAMP}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                    publishCsmDockerImage(image: env.NAME, tag: "${pythonVersion}-SLES${SLE_VERSION}-${env.VERSION}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                    publishCsmDockerImage(image: env.NAME, tag: "${pythonVersion}-SLES${SLE_VERSION}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                    publishCsmDockerImage(image: env.NAME, tag: "${pyMajor}.${pyMinor}-SLES${SLE_VERSION}", multiArch: env.MULTI_ARCH, isStable: isStable)

                                    /* Only publish the simple version images on the latest/newest base image.
                                        - Major.Minor.Patch                          (e.g. 3.10.8)
                                        - Major.Minor                                (e.g. 3.10)
                                     */
                                    if ("${SLE_VERSION}" == "${mainSleVersion}") {
                                        publishCsmDockerImage(image: env.NAME, tag: "${pyMajor}.${pyMinor}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                        publishCsmDockerImage(image: env.NAME, tag: "${pythonVersion}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                    }
                                } else {
                                    /*
                                    Publish these tags on unstable:
                                        - Hash-Timestamp                (e.g. SLES15.4-dhckj3-20221017133121)
                                        - Hash                          (e.g. SLES15.4-dhckj3)
                                    */
                                    publishCsmDockerImage(image: env.NAME, tag: "SLES${SLE_VERSION}-${env.VERSION}-${env.TIMESTAMP}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                    publishCsmDockerImage(image: env.NAME, tag: "SLES${SLE_VERSION}-${env.VERSION}", multiArch: env.MULTI_ARCH, isStable: isStable)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
