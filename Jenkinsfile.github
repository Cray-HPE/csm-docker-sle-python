/*
 *  MIT License
 *
 *  (C) Copyright 2022-2024 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
*/

@Library('csm-shared-library@main') _

// Docker registry to push to
def docker_registry = 'artifactory.algol60.net/csm-docker'

// The Python version available from the SUSE repositories, with the period.
def pythonVersion = '3.11'

// Define the distro that provides our repositories for the given Python version.
def mainSleVersion = '15.6'

// Disable pr-merge builds; node-image pipeline doesn't use the PR images at all.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built for node-image-build; this is a no-op build."
    return
}

// Only main or maint/* branches are stable.
def promotionToken = ~"(main|maint\\/.*)"
def isStable = env.BRANCH_NAME ==~ promotionToken ? true : false

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "1"))
        timeout(time: 60, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }

    // Run every week on Sunday at 4 PM, long after the base image has rebuilt from that morning.
    triggers { cron('H 16 * * 0') }

    environment {
        DOCKER_ARGS = getDockerBuildArgs(name: getRepoName(), description: 'A build environment for Python.')
        DOCKER_BUILDKIT = 1
        MULTI_ARCH = 1
        NAME = getRepoName()
        PY_VERSION = "${pythonVersion}"
        SLES_REGISTRATION_CODE = credentials('sles15-registration-code')
        TIMESTAMP = sh(returnStdout: true, script: "date '+%Y%m%d%H%M%S'").trim()
        VERSION = "${GIT_COMMIT[0..6]}"
    }

    stages {
        stage('Build and Publish') {
            matrix {
                axes {
                    axis {
                        name 'SLE_VERSION'
                        values '15.5', '15.6'
                    }
                }
                environment {
                    BUILD_CACHE = "SLES${SLE_VERSION}-${pythonVersion}-cache"
                    BUILD_ARGS = "--build-arg SLE_VERSION=${SLE_VERSION} --build-arg PY_VERSION=${PY_VERSION} --secret id=SLES_REGISTRATION_CODE"
                }
                stages {
                    stage('Docker setup') {
                        steps {
                            withCredentials([
                                    usernamePassword(
                                            credentialsId: 'artifactory-algol60-publish',
                                            usernameVariable: 'DOCKER_USER',
                                            passwordVariable: 'DOCKER_TOKEN'
                                    )
                            ]) {
                                script {
                                    sh "docker login ${docker_registry} --username \$DOCKER_USER --password \$DOCKER_TOKEN"
                                }
                            }
                        }
                    }
                    stage('Build') {
                        steps {
                            script {
                                sh "make image"
                            }
                        }
                    }
                    stage('Publish') {
                        environment {
                            DOCKER_BUILDX_ARGS = "${BUILD_ARGS} --platform linux/amd64,linux/arm64 --cache-from type=local,src=${BUILD_CACHE} --builder ${BUILD_CACHE}"
                        }
                        steps {
                            script {
                                // Only overwrite an image if this is a stable build.
                                if (isStable) {
                                    /*
                                    Publish these tags on stable:
                                        - Major.Minor                   (e.g. 3.11-SLES15.5)
                                        - Major.Minor                   (e.g. 3.11)
                                    */
                                    def stream = "${docker_registry}/stable/${env.NAME}"

                                    sh "docker buildx build --push ${DOCKER_BUILDX_ARGS} --tag \"${stream}:${pythonVersion}-SLES${SLE_VERSION}\" ."
                                    publishCsmDockerImage(image: env.NAME, push: false, isStable: isStable, tag: "${pythonVersion}-SLES${SLE_VERSION}")

                                    // Only publish the simple version images on the latest/newest base image.
                                    if ("${SLE_VERSION}" == "${mainSleVersion}" && env.BRANCH_NAME == 'main') {
                                        sh "docker buildx build --push ${DOCKER_BUILDX_ARGS} --tag \"${stream}:${pythonVersion}\" ."
                                        publishCsmDockerImage(image: env.NAME, push: false, isStable: isStable, tag: "${pythonVersion}")

                                        sh "docker buildx build --push ${DOCKER_BUILDX_ARGS} --tag \"${stream}:latest\" ."
                                        publishCsmDockerImage(image: env.NAME, push: false, isStable: isStable, tag: "latest")
                                    }
                                } else {
                                    /*
                                    Publish these tags on unstable:
                                        - Hash-Timestamp                (e.g. 3.11-SLES15.5-dhckj3-20221017133121)
                                        - Hash                          (e.g. 3.11-SLES15.5-dhckj3)
                                    */
                                    def stream = "${docker_registry}/unstable/${env.NAME}"

                                    sh "docker buildx build --push ${DOCKER_BUILDX_ARGS} --tag \"${stream}:${pythonVersion}-SLES${SLE_VERSION}-${env.VERSION}\" ."
                                    publishCsmDockerImage(image: env.NAME, push: false, isStable: isStable, tag: "${pythonVersion}-SLES${SLE_VERSION}-${env.VERSION}")

                                    sh "docker buildx build --push ${DOCKER_BUILDX_ARGS} --tag \"${stream}:${pythonVersion}-SLES${SLE_VERSION}-${env.VERSION}-${env.TIMESTAMP}\" ."
                                    publishCsmDockerImage(image: env.NAME, push: false, isStable: isStable, tag: "${pythonVersion}-SLES${SLE_VERSION}-${env.VERSION}-${env.TIMESTAMP}")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
